/**
* DisplayBox.cpp - 
* Author: Jordan Stafford
* Module: 5
* Homework 5 Project 1
* Problem Statement:
* Algorithim: 1)
*             2)
*             3)
*             4)
*             5)
*             6)
**/

//Import Statements
#include <iostream>
#include <iomanip>
#include <memory>
#include <ctime>

using namespace std ;

//Structures
struct Stone{
  string mLetter ;
  int mNumAttempts ;

  Stone(string letter, int numAttempts){
    mLetter = letter ;
    mNumAttempts = numAttempts ;
  }

} ;

//Prototypes
void printReport(unique_ptr<Stone>) ;

int main() {

  //Instance Variables
  string chars[] = {"A","B","C","D","E","F","G","H","I","J"} ;
  int cumulative_attempts = 0 ;

  //Set the seed of random number generator
  srand(time(NULL)) ;

  //Create an array of pointers to stone objects
  unique_ptr<Stone> slots[10] ;

  //Process Stones
  for (int i = 0 ; i < 10 ; i++){

    int attempts = 0 ;
    string letter = chars[i] ;

    while(true){
      //Generate a random number between 0 and 9
      int index = rand() % 9 ;
      cout << "Random Number: " << index << endl ; 
      //Check if available 
      if (!slots[index]){
        attempts++ ;
        cout << "Continuing\n" ;
        continue ;
      }
      unique_ptr<Stone> new_stone(new Stone(letter,attempts)) ;
      slots[index] = move(new_stone) ;
      cout << "Spot found\n" ;
      break ;
    }

    //Increment accumulator
    cumulative_attempts += attempts ;
  }
  
  for(int i = 0 ; i < 10 ; i++){
    cout << "Stone " << slots[i]->mLetter << " was placed in slot " << i << " after " << slots[i]->mNumAttempts << " attempts." ;
  }
}
void printReport(unique_ptr<Stone> rocks){
  
}
