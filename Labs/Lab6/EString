/**
 * This class creates a String in memory by making an array of pointers in memory
 */

#ifndef ESTRING_H
#define ESTRING_H

#include <cstring>
#include <iostream>

using namespace std ;

class EString{
  private:
    char *string ; //Pointer to the start of the string of characters in memory stored in an array
    int size ; //Size of word
  public:

    EString(const char *s = " ") ;
    EString(const EString &) ;
    ~EString() ;

    void print() ; //Print the string
    void change(const char *) ; //Reassgin the string

    EString &operator=(const EString &) ; //Assignment operator overload
    EString &operator++() ; //Pre-fix Increment Operator Overload
    EString &operator++(int) ; //Post-fix Increment Operator Overload
    char &operator[](int) ; //Index Access Operator Overload
    friend ostream &operator<<(ostream &, const EString &) ; //Stream Extraction Operator Overload
    friend EString operator+(const EString &, const EString &) ; //Addition Operator Overload

} ;
/**
*   Constructor
*/
EString :: EString(const char *original){
  size = strlen(original) ; 
  string = new char[size+1] ;
  strcpy(string,original) ; //Copy of provided word to the array in memory
}
/**
*   Copy Constructor
*/
EString :: EString(const EString &original){
    size = original.size ;
    string = new char[size+1] ;
    strcpy(string,original.string) ; //Copy of provided word to the array in memory
}
/**
*   Destructor
*/
EString :: ~EString(){}
/**
*   Print String by iterating through memory
*/
void EString::print(){
  for (int i = 0 ; i <= size ; i++)
    cout << *(string+i) ;
  cout << endl ;
}
/**
*   Change the word in memory to a new word
*/
void EString::change(const char *original){
  delete [] string ; //Clear original memory
  size = strlen(original) ; //Get new size
  string = new char[size + 1] ; //Create space in memory
  strcpy(string,original) ; //Copy new word into memory
}
/**
*   Overload the assignment operator
*/
EString & EString::operator=(const EString &original){
  delete [] string ;
  size = original.size ;
  string = new char[size+1] ;
  strcpy(string,original.string) ;
  return *this ;
}
/**
*   Overload the stream extraction operator
*/ 
ostream &operator<<(ostream &out, const EString &output_EString){
  out << output_EString.string ;
  return out ;
}
/**
*   Overload the Addition Operator
*/
EString operator+(const EString &first, const EString &second){
  int new_size = first.size + second.size + 1 ;
  char out[new_size] ;
  strcpy(out,first.string) ;
  strcat(out,second.string) ;
  return EString(out) ;
}
/**
* Overload the Increment Operator
*/
EString &EString::operator++(){

  EString tmp = *this ;
  for (int i = 0 ; i < tmp.size ; i++){
    this->operator[](i) = tolower(char(this->operator[](i))) ;
  }
  return *this ;
}
EString &EString::operator++(int value){
  EString old = *this ;
  for (int i = 0 ; i < size ; i++){
    this->operator[](i) = toupper(char(this->operator[](i))) ;
  }
  return *this ;
}
/**
*   Overload the Index Access Operator
*/
char &EString::operator[](int index){

  if (index < 0 || index > size){
    cout << "ERROR: Index out of bound." << endl ;
    exit(0) ;
  }
  return *(string + index)  ;
}
#endif 
