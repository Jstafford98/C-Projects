/**
* DateTimeDriver.cpp - This program provides a base functionality of allowing the user to create events in a calendar
* Author: Jordan Stafford
* Module: 6
* Lab 6 Project 2
* Problem Statement: This program allows users to create events that could be stored in a calendar
* Algorithim: 1) First a DAteTime class is created. This class represents a provided Date and Time. See comments for documentation. 
*             2) Then, an Event class is created. This class represents an Event within a calendar. See comments for documentation.
*             3) Lastly, two Event objects are created a displayed in main to showcase the programs functionalities. 
**/

#include <iostream>
#include <iomanip>

using namespace std ;

/**
 *  This class represents a given Date and Time for a particular event
 */
class TimeDate{
    private:
        int hour, minute, day ;
        string month ;
    public:
        /**
         *  This constructor initializes a TimeDate object using an initialization list
         */
        TimeDate(int hour,int minute ,int day,string month):
            hour(hour),
            minute(minute),
            day(day),
            month(month) {} ;
        /**
         *  This function generates a formatted output of the TimeDate object
         */
        string getTimeDate(){
            string print_hour = to_string(hour) ;
            string am_pm = hour < 12 ? "am" : "pm" ;
            if (hour == 0)
                print_hour = "12" ;
            else if (hour > 12)
                print_hour = to_string(hour-12) ;
            return month + " " + to_string(day) + " at " + print_hour + ":" + (minute < 10 ? "0" : "") + to_string(minute) + am_pm ;
        }
} ;
/**
 *  This class represents an event within a calendar
 */ 
class Event{
    private:
        TimeDate start_time, end_time ;
        string description ;
    public:
        /**
         *  This constructor initializes an Event object using an initialization list
         */
        Event(int start_hour, int start_minute, int start_day, string start_month, int end_hour, int end_minute, int end_day, string end_month, string description):
            start_time(start_hour,start_minute,start_day,start_month),
            end_time(end_hour,end_minute,end_day,end_month),
            description(description){} ;
        /**
         *  This function generates a formatted output of the Event object
         */ 
        string getEvent(){
            return description + " starts " + start_time.getTimeDate() + " and ends " + end_time.getTimeDate() ;
        }
} ;


int main(){

    //Create our two events
    Event birthdayParty(17,30,14,"Oct.",20,30,14,"Oct.","My Birthday Party"), microsoftInterview(15,7,1,"Jun.",20,7,1,"Jun.","My interview with Microsoft") ;

    //Display our two events
    cout << birthdayParty.getEvent() << endl ;
    cout << microsoftInterview.getEvent() << endl ;
}
